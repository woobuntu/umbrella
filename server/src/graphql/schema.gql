# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  bank: String!
  consentGuidance: String
  deductionGuidance: String
  holder: String!
  number: String!
}

type AuthState {
  isAuthenticated: Boolean!
  redirectUrl: String
}

type Basket {
  amount: Float!
  catalogOptionRelation: CatalogOptionRelation!
  catalogOptionRelationId: Float!
  id: Float!
  userId: String!
}

input BasketInfo {
  amount: Float!
  catalogOptionRelationId: Float!
}

type Career {
  classification: String!
  executiveId: Float!
  id: Float!
  record: String!
}

type Catalog {
  catalogFileRelations: [CatalogFileRelation!]!
  catalogOptionRelations: [CatalogOptionRelation!]!
  expirationDate: String
  id: Float!
  ingredients: String
  name: String!
  price: Float!
  storageMethod: String
}

type CatalogFileRelation {
  catalogId: Float!
  file: File!
  fileId: Float!
  id: Float!
}

type CatalogOptionRelation {
  catalog: Catalog!
  catalogId: Float!
  id: Float!
  option: Option!
  optionId: Float!
}

type Contact {
  address: String!
  mail: String!
  phone: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Delivery {
  address: String!
  detailAddress: String!
  id: Float!
  memo: String
  name: String!
  orderStatus: String
  phone: String!
  postCode: String!
}

type DeliveryWithOutId {
  address: String!
  detailAddress: String!
  memo: String
  name: String!
  orderStatus: String
  phone: String!
  postCode: String!
}

input DeliveryWithOutIdInput {
  address: String!
  detailAddress: String!
  memo: String
  name: String!
  orderStatus: String
  phone: String!
  postCode: String!
}

type Executive {
  careers: [Career!]!
  executiveFileRelations: [ExecutiveFileRelation!]!
  greeting: String
  id: Float!
  name: String!
  position: String!
}

type ExecutiveFileRelation {
  executiveId: Float!
  file: File!
  fileId: Float!
  id: Float!
}

type File {
  id: Float!
  name: String!
  path: String!
  type: String!
}

input FilterCatalogsInput {
  ids: [Float!]!
}

type Gnb {
  id: Float!
  lnbs: [Lnb!]!
  name: String!
}

type History {
  date: String!
  event: String!
}

type KakaoPayPrepareResult {
  mobileRedirectUrl: String!
  webRedirectUrl: String!
}

type Lnb {
  gnbId: Float!
  id: Float!
  name: String!
  path: String!
}

type Meta {
  metaFileRelations: [MetaFileRelation!]!
  name: String!
  type: String!
}

type MetaFileRelation {
  file: File!
  fileId: Float!
  type: String!
}

type Mutation {
  createPurchaseByKakaoPay(pgToken: String!): PurchaseResult!
  createPurchaseByTossPayments(tossPaymentInput: TossPaymentInput!): PurchaseResult!
  deleteBasket(id: Int!): Basket!
  prepareKakaoPayment: KakaoPayPrepareResult!
  signIn(signInInput: SignInInput!): AuthState!
  signOut: AuthState!
  storeOrderRelatedInfoInSession(orderRelatedInfoInput: OrderRelatedInfoInput!): OrderRelatedInfo!
  updateDelivery(deliveryId: Int!, updateDeliveryInput: UpdateDeliveryInput!): Delivery!
  updateProfile(updateUserInput: UpdateUserInput!): User!
  upsertBasket(upsertBasketInput: UpsertBasketInput!): Basket!
}

type Option {
  id: Float!
  name: String!
  price: Float!
}

type OrderRelatedInfo {
  delivery: DeliveryWithOutId!
  orderer: OrdererWithOutId!
}

input OrderRelatedInfoInput {
  delivery: DeliveryWithOutIdInput!
  orderer: OrdererWithOutIdInput!
}

type Orderer {
  email: String!
  id: Float!
  name: String!
  phone: String!
}

type OrdererWithOutId {
  email: String!
  name: String!
  phone: String!
}

input OrdererWithOutIdInput {
  email: String!
  name: String!
  phone: String!
}

type PublicPayment {
  amount: Float!
  deliveryFee: Float!
  id: Float!
  platform: String!
}

type PublicUser {
  email: String
  id: String!
  name: String
  phone: String
  userDeliveryRelations: [UserDeliveryRelation!]!
}

type Purchase {
  amount: Float!
  catalogOptionRelation: CatalogOptionRelation!
  catalogOptionRelationId: Float!
  delivery: Delivery!
  deliveryId: Float!
  id: Float!
  ordererId: Float!
  payment: PublicPayment!
  paymentId: Float!
  purchaseHistories: [PurchaseHistory!]!
  userId: String!
}

type PurchaseHistory {
  amount: Float!
  catalogOptionRelationId: Float!
  deliveryId: Float!
  from: DateTime!
  id: Float!
  ordererId: Float!
  paymentId: Float!
  purchaseId: Float
  userId: String!
}

type PurchaseResult {
  delivery: Delivery!
  orderer: Orderer!
  payment: PublicPayment!
}

type Query {
  account: Account!
  baskets: [Basket!]!
  catalog(id: Int!): Catalog!
  catalogs(filterCatalogsInput: FilterCatalogsInput): [Catalog!]!
  contact: Contact!
  executive(id: Int!): Executive!
  gnbs: [Gnb!]!
  histories: [History!]!
  isAuthenticated: AuthState!
  meta: Meta!
  metaFileRelations(type: String!): [MetaFileRelation!]!
  profile: PublicUser!
  purchases: [Purchase!]!
}

input SignInInput {
  basketInfo: BasketInfo
  code: String!
  platform: String!
  state: String!
}

input TossPaymentInput {
  amount: Float!
  orderId: String!
  paymentKey: String!
}

input UpdateDeliveryInput {
  address: String
  detailAddress: String
  memo: String
  name: String
  orderStatus: String
  phone: String
  postCode: String
}

input UpdateUserInput {
  email: String
  name: String
  phone: String
}

input UpsertBasketInput {
  amount: Float!
  catalogOptionRelationId: Float!
}

type User {
  accessToken: String
  email: String
  id: String!
  name: String
  phone: String
  refreshToken: String
}

type UserDeliveryRelation {
  default: Boolean!
  delivery: Delivery!
  deliveryId: Float!
  id: Float!
  userId: String!
}
